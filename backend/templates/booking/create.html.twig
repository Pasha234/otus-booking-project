{% extends 'base.html.twig' %}

{% block title %}Create Booking{% endblock %}

{% block body %}
    <div class="bg-gray-50 p-6 rounded-lg shadow-inner mb-6">
        <h1 class="text-3xl font-bold text-blue-700 mb-6 text-center">Create Booking</h1>

        {% if errors is defined and errors %}
            <div class="mb-4 p-3 rounded-md bg-red-100 text-red-700 border border-red-200">
                {% for error in errors %}
                    <p>{{ error }}</p>
                {% endfor %}
            </div>
        {% endif %}

        <form action="{{ path('app_booking_create_post', {group_id: group.id}) }}" method="post" class="max-w-lg mx-auto">
            <div class="mb-4">
                <label for="title" class="block text-gray-700 text-sm font-bold mb-2">Title:</label>
                <input type="text" id="title" name="title" value="{{ app.request.get('title') }}" required
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 focus:border-transparent {% if form_errors.title is defined %}border-red-500{% endif %}">
                {% if form_errors.title is defined %}<p class="text-red-500 text-xs italic mt-1">{{ form_errors.title|join(', ') }}</p>{% endif %}
            </div>

            <div class="mb-4">
                <label for="description" class="block text-gray-700 text-sm font-bold mb-2">Description:</label>
                <textarea id="description" name="description"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 focus:border-transparent {% if form_errors.description is defined %}border-red-500{% endif %}">{{ app.request.get('description') }}</textarea>
                {% if form_errors.description is defined %}<p class="text-red-500 text-xs italic mt-1">{{ form_errors.description|join(', ') }}</p>{% endif %}
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="start_at" class="block text-gray-700 text-sm font-bold mb-2">Start Time:</label>
                    <input type="datetime-local" id="start_at" name="start_at" value="{{ app.request.get('start_at') }}" required
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 focus:border-transparent {% if form_errors.start_at is defined %}border-red-500{% endif %}">
                    {% if form_errors.start_at is defined %}<p class="text-red-500 text-xs italic mt-1">{{ form_errors.start_at|join(', ') }}</p>{% endif %}
                </div>
                <div>
                    <label for="end_at" class="block text-gray-700 text-sm font-bold mb-2">End Time:</label>
                    <input type="datetime-local" id="end_at" name="end_at" value="{{ app.request.get('end_at') }}" required
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 focus:border-transparent {% if form_errors.end_at is defined %}border-red-500{% endif %}">
                    {% if form_errors.end_at is defined %}<p class="text-red-500 text-xs italic mt-1">{{ form_errors.end_at|join(', ') }}</p>{% endif %}
                </div>
            </div>

            {% if group.members|length > 0 %}
                <div class="mb-4">
                    <label for="participants" class="block text-gray-700 text-sm font-bold mb-2">Participants:</label>
                    <select id="participants" name="participants[]" multiple
                            class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 focus:border-transparent h-40">
                        {% for member in group.members %}
                            <option value="{{ member.user_id }}" {{ member.user_id in (app.request.get('participants')|default([])) ? 'selected' }}>
                                {{ member.name }}
                            </option>
                        {% endfor %}
                    </select>
                    <p class="text-xs text-gray-500 mt-1">Hold Ctrl (or Cmd on Mac) to select multiple participants.</p>
                    {% if form_errors.participants is defined %}<p class="text-red-500 text-xs italic mt-1">{{ form_errors.participants|join(', ') }}</p>{% endif %}
                </div>
            {% endif %}

            <div class="mb-6">
                <label class="block text-gray-700 text-sm font-bold mb-2">Resources:</label>
                <div id="resources-container" class="space-y-3">
                    <p class="text-gray-500 italic">Please select a start and end time to see available resources.</p>
                </div>
                <div id="resources-loader" class="hidden text-center p-4">Loading...</div>
                {% if form_errors.resources is defined %}<p class="text-red-500 text-xs italic mt-1">{{ form_errors.resources|join(', ') }}</p>{% endif %}
            </div>

            <div class="flex items-center justify-between">
                <button type="submit"
                        class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Create Booking
                </button>
                <a class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="{{ path('app_booking_group_show', {'id': group.id}) }}">
                    Cancel
                </a>
            </div>
        </form>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startAtInput = document.getElementById('start_at');
            const endAtInput = document.getElementById('end_at');
            const resourcesContainer = document.getElementById('resources-container');
            const loader = document.getElementById('resources-loader');
            const getResourcesUrl = "{{ path('app_booking_get_available_resources', {group_id: group.id}) }}";

            let debounceTimer;

            function fetchAvailableResources() {
                const startAt = startAtInput.value;
                const endAt = endAtInput.value;

                if (!startAt || !endAt || new Date(startAt) >= new Date(endAt)) {
                    resourcesContainer.innerHTML = '<p class="text-gray-500 italic">Please select a valid start and end time to see available resources.</p>';
                    return;
                }

                loader.classList.remove('hidden');
                resourcesContainer.innerHTML = '';

                fetch(getResourcesUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        start_at: startAt,
                        end_at: endAt
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    loader.classList.add('hidden');
                    if (data.resources && data.resources.length > 0) {
                        data.resources.forEach(resource => {
                            if (resource.is_active) {
                                resourcesContainer.appendChild(createResourceElement(resource));
                            }
                        });
                    } else {
                        resourcesContainer.innerHTML = '<p class="text-gray-500 italic">No resources available for the selected time.</p>';
                    }
                })
                .catch(error => {
                    loader.classList.add('hidden');
                    resourcesContainer.innerHTML = '<p class="text-red-500 italic">Error loading resources. Please try again.</p>';
                    console.error('Error fetching resources:', error);
                });
            }

            function createResourceElement(resource) {
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between p-3 bg-white border rounded-lg shadow-sm';

                const infoDiv = document.createElement('div');
                infoDiv.innerHTML = `
                    <span class="font-semibold text-gray-800">${resource.name}</span>
                    <span class="ml-2 text-sm text-gray-600">(Available: ${resource.available_quantity} / ${resource.total_quantity})</span>
                `;

                const controlDiv = document.createElement('div');
                controlDiv.className = 'flex items-center space-x-2';

                const minusBtn = document.createElement('button');
                minusBtn.type = 'button';
                minusBtn.textContent = '-';
                minusBtn.className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50';

                const quantityInput = document.createElement('input');
                quantityInput.type = 'number';
                quantityInput.name = `quantity[${resource.id}]`;
                quantityInput.value = 0;
                quantityInput.min = 0;
                quantityInput.max = resource.available_quantity;
                quantityInput.className = 'w-16 text-center border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500';
                quantityInput.readOnly = true;

                const plusBtn = document.createElement('button');
                plusBtn.type = 'button';
                plusBtn.textContent = '+';
                plusBtn.className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 disabled:opacity-50';

                minusBtn.onclick = () => {
                    let currentValue = parseInt(quantityInput.value);
                    if (currentValue > 0) quantityInput.value = currentValue - 1;
                };

                plusBtn.onclick = () => {
                    let currentValue = parseInt(quantityInput.value);
                    if (currentValue < resource.available_quantity) quantityInput.value = currentValue + 1;
                };

                controlDiv.append(minusBtn, quantityInput, plusBtn);
                div.append(infoDiv, controlDiv);
                return div;
            }

            function handleDateChange() {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(fetchAvailableResources, 300);
            }

            startAtInput.addEventListener('change', handleDateChange);
            endAtInput.addEventListener('change', handleDateChange);
        });
    </script>
{% endblock %}